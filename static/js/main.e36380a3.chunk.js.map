{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","axios","get","response","data","HomeList","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","className","results","length","map","item","key","src","poster_path","alt","original_title","FeaturedMovie","firstDane","Date","first_air_date","genres","i","push","name","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","href","id","join","InicioApp","useState","movieList","setMovieList","featuredData","setFeaturedData","useEffect","loadAll","Tmdb","list","originals","filter","randomNumber","Math","floor","random","chosen","chosenInfo","ReactDOM","render","StrictMode","enable","document","getElementById"],"mappings":"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","file":"static/js/main.e36380a3.chunk.js","sourcesContent":["import axios from 'axios';\nconst API_KEY = '2eabc78d837c127ef746b130b69eb798';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n  const response = await axios.get(`${API_BASE}${endpoint}`);\n  return response.data;\n};\n\nconst HomeList = {\n  getHomeList: async () => {\n    return [\n      {\n        slug: 'orginals',\n        title: 'Originais Netflix',\n        items: await basicFetch(\n          `/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'trending',\n        title: 'Recomendados para voce',\n        items: await basicFetch(\n          `/trending/all/week?&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'toprated',\n        title: 'Em alta',\n        items: await basicFetch(\n          `/movie/top_rated?&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'action',\n        title: 'Ação',\n        items: await basicFetch(\n          `/discover/tv?with_genres=28&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'comedia',\n        title: 'Comédia',\n        items: await basicFetch(\n          `/discover/tv?with_genres=35&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'horror',\n        title: 'Terror',\n        items: await basicFetch(\n          `/discover/tv?with_network=27&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'romance',\n        title: 'Romance',\n        items: await basicFetch(\n          `/discover/tv?with_genres=10749&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n      {\n        slug: 'documentary',\n        title: 'Documentário',\n        items: await basicFetch(\n          `/discover/tv?with_genres=99&language=pt-BR&api_key=${API_KEY}`,\n        ),\n      },\n    ];\n  },\n  getMovieInfo: async (movieId, type) => {\n    let info = {};\n    if (movieId) {\n      switch (type) {\n        case 'movie':\n          info = await basicFetch(\n            `/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`,\n          );\n          return info;\n        case 'tv':\n          info = await basicFetch(\n            `/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`,\n          );\n          return info;\n        default:\n          info = null;\n          break;\n      }\n    }\n  },\n};\n\nexport default HomeList;\n","import React from 'react';\nimport './MovieRow.css';\n\nconst MovieRow = ({ title, items }) => {\n  return (\n    <div className=\"movieRow\">\n      <h2>{title}</h2>\n      <div className=\"movie-row--listarea\">\n        <div className=\"movie-row--list\">\n          {items.results.length > 0 &&\n            items.results.map((item, key) => (\n              <div key={key} className=\"movieRow--item\">\n                <img\n                  src={`http://image.tmdb.org/t/p/w300/${item.poster_path}`}\n                  alt={item.original_title}\n                />\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default MovieRow;\n","import React from 'react';\nimport './FeaturedMovie.css';\n\nconst FeaturedMovie = ({ item }) => {\n  let firstDane = new Date(item.first_air_date);\n  let genres = [];\n  for (let i in item.genres) {\n    genres.push(item.genres[i].name);\n  }\n  return (\n    <section\n      className=\"featured\"\n      style={{\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundImage: `url(http://image.tmdb.org/t/p/original${item.backdrop_path})`,\n      }}\n    >\n      <div className=\"featured--vertical\">\n        <div className=\"featured--horizontal\">\n          <div className=\"featured--name\">{item.original_name}</div>\n          <div className=\"featured--info\">\n            <div className=\"featured--points\"> {item.vote_average} pontos</div>\n\n            <div className=\"featured--year\"> {firstDane.getFullYear()}</div>\n\n            <div className=\"featured--seasons\">\n              {item.number_of_seasons} temporada\n              {item.number_of_seasons !== 1 ? 's' : ''}\n            </div>\n          </div>\n          <div className=\"featured--description\">{item.overview}</div>\n          <div className=\"featured--buttons\">\n            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">\n              ► Assistir\n            </a>\n            <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">\n              + Minha Lista\n            </a>\n          </div>\n          <div className=\"featured--genres\">\n            <strong>Gêneros:</strong>\n            {genres.join(',')}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeaturedMovie;\n","import React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport './App.css';\nimport FeaturedMovie from './components/FeaturedMovie';\n\nconst InicioApp = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //carrega lista\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //pega destaque\n      let originals = list.filter((i) => i.slug === 'orginals');\n      let randomNumber = Math.floor(\n        Math.random() * originals[0].items.results.length - 1,\n      );\n      let chosen = originals[0].items.results[randomNumber];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n    loadAll();\n  }, []);\n  return (\n    <div className=\"page\">\n      {featuredData && <FeaturedMovie item={featuredData} />}\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n    </div>\n  );\n};\n\nexport default InicioApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode enable={false}>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}